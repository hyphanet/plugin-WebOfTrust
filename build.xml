<?xml version="1.0"?>
<!-- ant build file for WoT -->

<project name="WoT" default="dist" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless">
	<!-- ======================================================================================= -->
	<!-- Configuration                                                                           -->
	<!-- ======================================================================================= -->
		
	<!-- You can use this file to override the below properties. -->
	<property file="override.properties"/>
	<!-- Dependencies. These are the most important to configure!                               -->
	<!--                                                                                        -->
	<!-- Freenet build01481 compiled with "./gradlew jar copyRuntimeLibs" will copy the         -->
	<!-- freenet.jar and its dependencies to this directory:                                    -->
	<property name="freenet.lib.new.location"   location="../fred/build/output/"/>
	<!-- Older Freenet builds will use these places for the JARs, some of which have to be      -->
	<!-- downloaded manually:                                                                   -->
	<property name="freenet.lib.old.location.1" location="../fred/lib/bcprov.jar"/>
	<property name="freenet.lib.old.location.2" location="../fred/lib/jna-platform.jar"/>
	<property name="freenet.lib.old.location.3" location="../fred/lib/jna.jar"/>
	<property name="freenet.lib.old.location.4" location="../fred/lib/freenet/freenet-ext.jar"/>
	<property name="freenet.lib.old.location.5" location="../fred/dist/freenet.jar"/>
	<!-- Unit test dependencies                                                                 -->
	<property name="junit.location" value="/usr/share/java/junit4.jar"/>
	<property name="hamcrest.location" value="/usr/share/java/hamcrest-core.jar"/>
	<!-- Optional, only needed if using "ant -Dtest.coverage=true"                              -->
	<property name="cobertura.location" value="/usr/share/java/cobertura.jar"/>
	<!-- Minimum Java version which fred officially requires
	   = Maximum version which WoT's code can use features of. -->
	<property name="source-version" value="7"/>
	<property name="target-version" value="7"/>
	<!-- To allow you to restart your debug node after recompiling without manually reloading
	     the WoT plugin you can specifiy this property to point to the node's WebOfTrust.jar.
	     The Ant builder will delete it automatically as part of the "clean" target. -->
	<property name="debug-node-wot-plugin.location" location="../fred/plugins/WebOfTrust.jar"/>
	
	<!-- ======================================================================================= -->
	<!-- Configuration which you should probably leave as is!                                    -->
	<!-- ======================================================================================= -->
	
	<!-- Git submodule directories of dependencies. Will be compiled automatically! -->
	<property name="db4o-submodule.location" location="db4o-7.4"/>
	<property name="xchart-submodule.location" location="XChart"/>
	<!-- After compiling the submodule JARs are copied into this directory and used from there.
	     (Copying is necessary because <zipgroupfileset> needs to consume a directory.) -->
	<property name="dependencies.location" location="dependencies/"/>
	<property name="svn.revision" value="@custom@"/>
	<property name="build" location="build/"/>
	<property name="build-test" location="build-test/"/>
	<property name="build-test-jar" location="${build-test}/WebOfTrust-with-unit-tests.jar"/>
	<property name="build-test-coverage" location="test-coverage/"/>
	<property name="dist" location="dist/"/>
	<property name="src" location="src/"/>
	<property name="javadoc" location="javadoc/"/>
	<property name="version.src" value="plugins/WebOfTrust/Version.java" />
	<property name="version.build" value="plugins/WebOfTrust/Version.class" />

	<available file="src/plugins/WebOfTrust/Version.java" property="version.present"/>
	<available file="${junit.location}" property="junit.present"/>
	<available file="${hamcrest.location}" property="hamcrest.present"/>
	<available file="${cobertura.location}" property="cobertura.present"/>
	<property name="test.coverage" unless:set="${test.coverage}" if:true="${cobertura.present}" value="true"/>

	<!-- Libraries which we get from fred.
	     TODO: Code quality: Copy them to dependencies.location and use them from there, delete them
	     at clean task. This will allow compiling if fred isn't currently compiled as long as clean
	     isn't run. -->
	<path id="lib.path">
		<!-- Use filesets instead of <pathelement> to:
		     - allow using wildcards when including freenet.lib.new.location so we don't need to
		       synchronize the list of JARs which fred needs with what this build file includes.
		     - for the old JAR locations ensure the print-libs task won't print files which don't
		       exist as that is what he wildcard usage dictates for thew new location already. -->
		
		<fileset dir="${freenet.lib.new.location}" erroronmissingdir="no" casesensitive="no">
			<include name="**/*.jar"/>
		</fileset>
		<fileset file="${freenet.lib.old.location.1}" erroronmissingdir="no"/>
		<fileset file="${freenet.lib.old.location.2}" erroronmissingdir="no"/>
		<fileset file="${freenet.lib.old.location.3}" erroronmissingdir="no"/>
		<fileset file="${freenet.lib.old.location.4}" erroronmissingdir="no"/>
		<fileset file="${freenet.lib.old.location.5}" erroronmissingdir="no"/>
	</path>

	<!-- Submodule libraries whose classes are to be bundled in our own JAR. -->
	<path id="submodules.path">
		<fileset dir="${dependencies.location}" erroronmissingdir="yes" casesensitive="no">
			<include name="*.jar"/>
		</fileset>
	</path>

	<path id="cobertura.path">
		<pathelement location="${cobertura.location}"/>
	</path>
	
	<!-- For print-libs task: All runtime dependencies of WoT plus the build-time dependencies.
	     Uses <fileset> instead of <pathelement> so it only contains only those which exist as that
	     is what lib.path does already. -->
	<path id="lib.external.all.path">
		<path refid="lib.path"/>
		<fileset file="${junit.location}" />
		<fileset file="${hamcrest.location}"/>
		<fileset file="${cobertura.location}"/>
	</path>

	<presetdef name="javac">
		<!--
		Workaround for ant 1.8 misfeature. TODO: Remove when ant fixes this.
		
		If we don't set this to false, we will get "warning: 'includeantruntime' was not set, defaulting to
		build.sysclasspath=last; set to false for repeatable builds"
		
		(includeAntRuntime = "Whether to include the Ant run-time libraries in the classpath; defaults to yes, 
		unless build.sysclasspath is set. It is usually best to set this to false so the script's behavior 
		is not sensitive to the environment in which it is run."
		Source: https://ant.apache.org/manual/Tasks/javac.html)
		-->
		<javac includeantruntime="false" />
	</presetdef>

	<exec executable="git"
		failifexecutionfails="false"
		errorProperty="git.errror"
		outputproperty="git.describe"
		resultproperty="git.result">
		<arg value="describe" />
		<arg value="--always" />
		<arg value="--abbrev=4" />
		<arg value="--dirty" />
	</exec>

	<condition property="git.revision" value="${git.describe}" else="@unknown@">
		<and>
			<equals arg1="${git.result}" arg2="0" />
			<isset property="git.describe" />
		</and>
	</condition>

	<target name="get-submodules" description="Downloads the git submodule dependencies required by WoT">
		<echo>Downloading git submodules if they don't exist already...</echo>
		<exec executable="git">
			<arg line="submodule update --init"/>
		</exec>
	</target>

	<target name="compile-submodules" depends="get-submodules" description="Compiles the dependencies">
		<echo>Compiling db4o submodule...</echo>
		<ant dir="${db4o-submodule.location}" inheritAll="false" useNativeBasedir="true">
			<property name="javac.source.version" value="${source-version}"/>
			<property name="javac.target.version" value="${target-version}"/>
		</ant>
		
		<echo>Compiling XChart submodule...</echo>
		<ant dir="${xchart-submodule.location}" inheritAll="false" useNativeBasedir="true">
			<property name="javac.source.version" value="${source-version}"/>
			<property name="javac.target.version" value="${target-version}"/>
		</ant>
		
		<copy file="${db4o-submodule.location}/db4o.jar" todir="${dependencies.location}" overwrite="true"/>
		<copy file="${xchart-submodule.location}/xchart.jar" todir="${dependencies.location}" overwrite="true"/>
	</target>

	<target name="clean-submodules" depends="get-submodules" description="Cleans the compile output of the dependencies">
		<echo>Cleaning db4o submodule...</echo>
		<ant dir="${db4o-submodule.location}" target="clean" inheritAll="false"
			useNativeBasedir="true"/>
		
		<echo>Cleaning XChart submodule...</echo>
		<ant dir="${xchart-submodule.location}" target="clean" inheritAll="false"
			useNativeBasedir="true"/>
	</target>

	<target name="print-libs">
		<echo>External dependencies on classpath follow, but ONLY those which did exist.</echo>
		<echo>(This cannot tell which JARs are missing because that would require ant-contrib</echo>
		<echo>and I don't want to require Freenet release managers to install it. Sorry.)</echo>
		<echo></echo>
		<echo>If compiling fails due to missing classes please:</echo>
		<echo>- ensure fred was built with "./gradlew jar copyRuntimeLibs" to make it copy</echo>
		<echo>  its dependencies' JARs to "build/output/".</echo>
		<echo>- compare the found JARs against the configuration at top of build.xml to find</echo>
		<echo>  out which JARs are missing.</echo>
		<echo></echo>
		<pathconvert refid="lib.external.all.path" pathsep="${line.separator}" property="all.path.printable"/>
		<echo>${all.path.printable}</echo>
	</target>

	<target name="mkdir">
		<mkdir dir="${build}"/>
		<mkdir dir="${build-test}"/>
		<mkdir dir="${build-test}/test"/>
		<mkdir dir="${build-test-coverage}"/>
		<mkdir dir="${dist}"/>
	</target>

	<!-- ================================================== -->
	<target name="compile" depends="print-libs, compile-submodules, mkdir">
		<!-- Create the time stamp -->
		<tstamp/>

		<!-- Create the Version file with patched revision number in ${build} -->
		<copy file="${src}/${version.src}" tofile="${build}/${version.src}" overwrite="true" />
		<delete file="${build}/${version.build}" quiet="true" />
		<replace file="${build}/${version.src}">
			<replacefilter token="@custom@" value="${git.revision}"/>
		</replace>
		<echo message="Updated build version to ${git.revision} in ${build}/${version.src}"/>

		<!-- Force compile of Version.java in case compile of ${src} didn't trigger it -->
		<javac srcdir="${build}" destdir="${build}" debug="on" optimize="on" source="${source-version}" target="${target-version}">
			<classpath>
				<path refid="submodules.path"/>
				<path refid="lib.path"/>
			</classpath>
			<include name="${version.src}"/>
		</javac>

		<javac srcdir="src/" destdir="${build}" debug="on" optimize="on" source="${source-version}" target="${target-version}" encoding="UTF-8">
			<classpath>
				<path refid="submodules.path"/>
				<path refid="lib.path"/>
			</classpath>
			<include name="**/*.java"/>
			<exclude name="${version.src}"/>
		</javac>
		<copy todir="${build}">
			<fileset dir="src/">
				<include name="**/*.l10n" />
			</fileset>
		</copy>
	</target>

	<!-- ================================================== -->

	<condition property="unit.dependencies">
		<and>
			<istrue value="${junit.present}"/>
			<istrue value="${hamcrest.present}"/>
		</and>
	</condition>

	<target name="junit-compile" depends="compile" if="unit.dependencies">
		<javac srcdir="test/" destdir="${build-test}/test" debug="on" optimize="on"
				source="${source-version}" target="${target-version}" >
			
			<classpath>
				<path refid="submodules.path"/>
				<path refid="lib.path"/>
				<pathelement path="${build}"/>
				<pathelement location="${junit.location}"/>
				<pathelement location="${hamcrest.location}"/>
			</classpath>
			<compilerarg value="-Xlint"/>
			<include name="**/*.java"/>
		</javac>
		
		<!-- Copy main non-test classes to tests so we can produce a full working WoT JAR -->
		<copy todir="${build-test}/test" overwrite="false">
			<fileset dir="${build}/"/>
		</copy>
	</target>
	
	<target name="junit-inject-cobertura" depends="clean, junit-compile"
			if="${test.coverage}" unless="${test.benchmark}">
		
		<fail unless:true="${cobertura.present}" message="${cobertura.location} not found!"/>
		
		<taskdef classpathref="cobertura.path" resource="tasks.properties"/>
		
		<cobertura-instrument datafile="${build-test-coverage}/cobertura.ser">
			<auxClasspath>
				<path refid="submodules.path"/>
				<path refid="lib.path"/>
			</auxClasspath>
			
			<fileset dir="${build-test}/test">
				<include name="**/*.class" />
				<!-- kaptcha is a third-party library -->
				<exclude name="plugins/WebOfTrust/introduction/captcha/kaptcha/**/*"/>
				<exclude name="**/*Test*.class"/>
				<exclude name="**/*Benchmark*.class"/>
			</fileset>
		</cobertura-instrument>
	</target>
	
	<target name="junit-package" depends="junit-compile, junit-inject-cobertura">
		<jar jarfile="${build-test-jar}" duplicate="fail">
			<manifest>
				<attribute name="Plugin-Main-Class" value="plugins.WebOfTrust.WebOfTrust"/>
			</manifest>
			<fileset dir="src/" casesensitive="no">
				<include name="*.txt"/> <!-- Include the GPL -->
			</fileset>
			
			<fileset dir="${build-test}/test/"/> <!-- Separate directory to exclude the JAR -->
			<zipgroupfileset dir="${dependencies.location}" casesensitive="no" includes="*.jar"/>
		</jar>
	</target>

	<target name="junit" depends="junit-package" unless="${test.skip}"
			description="Runs all unit tests. Options:&#10;
		        - Set test.coverage=true to analyze test coverage. View by e.g.: firefox test-coverage/html/index.html&#10;
		        - Set test.skip=true to skip&#10;
		        - Set test.class=&lt;test class&gt; (e.g. test.class=plugins.WebOfTrust.WoTTest) to run a single test)&#10;
		        - Set test.benchmark=true to run benchmarks.&#10;
		        - Set test.unreliable=true to run tests which may fail on slow machines.">
		
		<fail unless="${unit.dependencies}" message="One of the unit test dependencies not found:&#10;
			${junit.location}&#10;
			${hamcrest.location}&#10;
			Use parameter -Dtest.skip=true to compile without running the self-tests.&#10;
			WARNING: Web of Trust uses lots of comprehensive tests, changing the code without&#10;
			running them is a very bad idea!"/>
		
		<!-- Regular non-benchmark unit tests. -->
		<!-- The 512 MB memory limit was determined by running ~ 10 iterations of the tests as of
		     git describe == build0019-236-gfaf9fdb with 4GB, 512 MB, 384 MB and 256 MB. The runtime
		     average wasn't significantly different for any of those so there is no excessive GCing
		     happening and 512 MB should be enough for now and leave some leeway for new tests.
		     showoutput was enabled for IdentityFetcherTest so you can watch its progress on stdout
		     while it is still running instead of only getting it shown after it's finished. -->
		<junit printsummary="yes" fork="yes" haltonfailure="yes" unless:true="${test.benchmark}"
				maxmemory="512m" showoutput="yes">
			
			<classpath>
				<path refid="lib.path"/>
				<pathelement location="${build-test-jar}"/>
				<pathelement location="${junit.location}"/>
				<pathelement location="${hamcrest.location}"/>
				<pathelement location="${cobertura.location}" if:true="${test.coverage}"/>
			</classpath>
			
			<assertions><enable/></assertions>
			<formatter type="plain" usefile="false"/>
			<test if="test.class" name="${test.class}"/>
			<batchtest unless="test.class" fork="yes">
				<zipfileset src="${build-test-jar}">
					<include name="**/*Test*.class"/>
					<!-- Exclude member classes:
					     Java will auto-generate switchtable classes for switch() upon enums.
					     JUnit would then complain that those classes do not contain a public
					     constructor. -->
					<exclude name="**/*$*.class"/>
					<exclude name="**/*Benchmark*.class"/>
					<exclude name="**/SynchronousDelayedBackgroundJobTest.class"
						unless="test.unreliable" />
					<exclude name="**/TickerDelayedBackgroundJobTest.class"
						unless="test.unreliable" />
					<exclude name="com/db4o/**"/>
					<exclude name="org/knowm/xchart/**"/>
				</zipfileset>
			</batchtest>
			
			<sysproperty key="net.sourceforge.cobertura.datafile"
				file="${build-test-coverage}/cobertura.ser" if:true="${test.coverage}"/>
			<sysproperty key="extensiveTesting" value="${extensiveTesting}" />
			<jvmarg value="-Djava.awt.headless=true"/>
			<!-- See IS_UNIT_TEST at class Configuration -->
			<jvmarg value="-Dis_WOT_unit_test=true"/>
			<!-- Pass the name of the JAR to the tests so they can load it into a fred instance -->
			<jvmarg value="-DWOT_test_jar=${build-test-jar}"/>
		</junit>
		
		<cobertura-report if:true="${test.coverage}" unless:true="${test.benchmark}"
			srcdir="${src}"
			datafile="${build-test-coverage}/cobertura.ser"
			destdir="${build-test-coverage}/html"
			format="html"/>
		
		<!-- Benchmarks. They need assertions disabled so they're a task of their own. -->
		<!-- Also, we set showoutput="true" so you get live output as benchmarks take a long time -->
		<junit printsummary="yes" showoutput="true" fork="yes" haltonfailure="yes" if:true="${test.benchmark}">
			<classpath>
				<path refid="lib.path"/>
				<pathelement location="${build-test-jar}"/>
				<pathelement location="${junit.location}"/>
				<pathelement location="${hamcrest.location}"/>
			</classpath>

			<assertions><disable/></assertions>
			<formatter type="plain" usefile="false"/>
			<test if="test.class" name="${test.class}"/>
			<batchtest unless="test.class" fork="yes">
				<zipfileset src="${build-test-jar}">
					<include name="**/*Benchmark*.class"/>
					<!-- Exclude member classes:
					     Java will auto-generate switchtable classes for switch() upon enums.
					     JUnit would then complain that those classes do not contain a public
					     constructor. -->
					<exclude name="**/*$*.class"/>
					<exclude name="com/db4o/**"/>
					<exclude name="org/knowm/xchart/**"/>
				</zipfileset>
			</batchtest>
			
			<sysproperty key="extensiveTesting" value="${extensiveTesting}" />
			<jvmarg value="-Djava.awt.headless=true"/>
			<!-- See IS_UNIT_TEST at class Configuration -->
			<jvmarg value="-Dis_WOT_unit_test=true"/>
			<!-- Pass the name of the JAR to the tests so they can load it into a fred instance -->
			<jvmarg value="-DWOT_test_jar=${build-test-jar}"/>
		</junit>
	</target>

	<!-- ================================================== -->
	<target name="dist" depends="clean,compile,junit"
		description="generate the distribution" >
		
		<jar jarfile="${dist}/WebOfTrust.jar" duplicate="fail">
			<manifest>
				<attribute name="Plugin-Main-Class" value="plugins.WebOfTrust.WebOfTrust"/>
			</manifest>
			<fileset dir="src/" casesensitive="no">
				<include name="*.txt"/> <!-- Include the GPL -->
			</fileset>
			<fileset dir="${build}/"/>
			<zipgroupfileset dir="${dependencies.location}" casesensitive="no" includes="*.jar"/>
		</jar>
	</target>

	<!-- ================================================== -->
	<target name="javadoc" description="generate javadocs">
		<delete dir="${javadoc}"/>
		<path id="javadoc.classpath">
			<path refid="submodules.path"/>
			<path refid="lib.path"/>
		</path>
		<javadoc classpathref="javadoc.classpath" destdir="${javadoc}" author="true" version="true" use="true" private="true">
			<fileset dir="src/" defaultexcludes="yes">
				<include name="**/*.java"/>
			</fileset>
			<link href="http://docs.oracle.com/javase/${source-version}/docs/api/"/>
			<link href="http://freenetproject.org/javadocs/"/>
		</javadoc>
	</target>

	<!-- ================================================== -->
	<target name="clean" depends="clean-submodules" description="Delete class files and docs dir and the plugin file in plugins/ of your debug node.">
		<delete dir="${build}"/>
		<delete dir="${build-test}"/>
		<delete dir="${build-test-coverage}"/>
		<delete dir="${dependencies.location}"/>
		<delete dir="${dist}"/>
		<delete file="${debug-node-wot-plugin.location}"/>
	</target>
</project>
