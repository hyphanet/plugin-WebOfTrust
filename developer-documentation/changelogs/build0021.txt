Web of Trust Version 0.4.6 build0021
------------------------------------------------------------------------

SUMMARY AND OUTLOOK (detailed changelog is below)

Summary blah blah. Blah blah reference to link [1].

Outlook blah blah.

Thanks to the Cobertura test coverage analysis tool which WoT supports
since the previous release, efforts have begun towards achieving 100%
test coverage in WoT.


CHANGELOG - prefixed with the bugtracker issue number

- 0000001: [category_of_issue_1] title_of_issue_1.......................
           more_lines_of_title (developer_of_issue_1)...................

  Blah.
  Blah.

- 0000002: .............................................................
           .............................................................
  0000003: .............................................................
           .............................................................

  Blah.
  Blah.

- 0007021: [Performance] Statistics page: Add graphs of download speed
           (xor)

  This adds two plots to the page:
  - Total downloaded identity files plotted against the uptime of WoT
  - Identity files downloaded per hour plotted against the uptime.

  They show both data of the current session as well as of the last
  session, i.e. from before Freenet / WoT was restarted the last time.
  Each of both is displayed separately for comparison.

  The data of the last session is stored in a file separate to the main
  WoT database.
  This allows benchmarking changes to the codebase by doing two runs,
  with the old and the new code, using a fresh db4o database each while
  keeping the statistics file.
  The resulting plots will contain both test runs then.
  This will be used to benchmark the main goal of this build - the
  rewrite of the code for downloading identities.

  The XChart plotting library was used to produce the plots, which seems
  very easy to use and thus luckily was a good choice.
  As XChart provides only rendering, not computation, I wrote lots of
  utility classes to make it easy to gather and preprocess the input
  data for plots.
  Unit tests to provide full test coverage for the utility classes have
  been shipped as well. The support for using the Cobertura test
  coverage analysis library which I've recently added to WoT is now
  paying off.
  Overall it will now be very easy to add further plots of different
  aspects which are a good idea to measure for performance improvement
  purposes. I will definitely consider this for future releases.

- 0006994: [Performance] Fix up to 1.5 hour delay of captcha solution
           download (xor)

  The identities which publish captchas check for solutions of them on
  the network every 0.5 to 1.5 hours (randomized delay).

  Unfortunately the code which does this had a bug:
  When generating new captchas it didn't try to download solutions right
  after uploading the captchas.
  Instead the solutions would only be downloaded at the next iteration
  of the maintenance loop, i.e. after the said 0.5 to 1.5 hours.
  This could cause a delay of 1.5 hours for new identities to become
  visible after solving a captcha.

  It was fixed to try to download solutions right away.
  Together with the below fix for issue 0006996 a round-trip time of 3
  minutes should be possible now for introduction, as measured by 89
  iterations of the new unit test for introduction introduced by
  issue 0006951.
  That time is for uploading the captcha, the remote identity downloading
  the captcha, uploading the solution, the solution being downloaded by
  the captcha's publisher, and the introduced identity being downloaded
  by it as well.

  Notably this was discovered thanks to the new unit test for captcha
  up-/download as introduced in this release by issue 0006951.

- 0006996: [Performance] Fix 10 minute delay of captcha solution upload
           (xor)

  The code which uploads captcha solutions had a bug which almost always
  caused the upload of solutions to be delayed by 10 minutes, causing
  new identities to not become visible before that.

  This delay has been reduced to zero.

  This was also discovered thanks to the new unit test for captcha
  up-/download.

- 0006835: [Features] Merge random nickname improvement (ArneBab)

  Some very short name templates such as "D" or "CNR" were removed to
  make the names more pleasant.

  Further the wizard for creating identities has been changed to remove
  the following warning:
     "If you don't like it please do not reload the page to generate
      another random name - this also reveals something about your
      preferences!"

  It was removed because:
  - it's nice if users can have a name which they identify with.
  - it seems very difficult for an attacker to even find a place where
    statistics about the name preferences of someone could be
    acquired. Without stats, it is impossible to take good guesses which
    random nicknames belong to whom.

- [Usability] Suffix "Not downloaded yet" nickname placeholders with
  part of the identities' unique identifiers to allow distinguishing the
  affected identities (xor)

CHANGELOG about stuff only interesting for developers

- 0006804: [Code quality] Unit tests: Recycle fred simulator code to
           allow tests which do real inserts/fetches (xor)

  Previously WoT unit tests have not been testing the code for
  uploading/downloading to/from the Freenet network at all.
  They only tested the core which processes the transferred data.

  Now unit tests can use the new class AbstractMultiNodeTest to use the
  Freenet core code to create multiple real Freenet instances on the
  local machine which connect to each other, and run the WoT plugin on
  multiple of those nodes to test network traffic between instances of
  WoT.
  This does not involve the public network, all traffic is strictly
  local.

  Surprisingly this does not require much computing power:
  Hundreds of test runs have shown that it does reliably complete with
  only 10 nodes. Dozens of runs validated that it requires as little as
  512 MB of RAM given to Java, it may possibly even work with 256 MB.
  A simple upload/download test run completes within 167 seconds on my
  10 years old 2.4 GHz Core 2 Duo.

  Further, it is nice to know that a simple network-based test only
  takes 150 lines of code to implement.

  This allows us to do really sophisticated high level tests of whether
  WoT works as intended, some of which have already been implemented,
  see the following issues.

- 0006950: [Code quality] Unit tests: Networked tests for classes
           IdentityFetcher and IdentityInserter (xor)

  While the primary goal of this release is to replace the legacy class
  IdentityFetcher with a much faster new implementation (classes
  IdentityDownloader*), the legacy class was nevertheless preserved so
  we can keep it as a reference implementation for a while to have
  something to test the new code against.

  It was decided to use the legacy class as a first subject to test with
  the new code for networked tests as described by the aforementioned
  issue 0006804. It is a good idea to test the legacy class because:
  - it had to be modified by this release to take account for the
    changes to the WoT core which had to be made to power the new
    implementation. These modifications could have caused bugs.
  - it is more easy to understand than the new implementation and thus
    serves well as a simple example of how to do networked tests.

  Class IdentityFetcherTest was added which tests IdentityFetcher -
  and also the IdentityInserter as a side effect - like this:
  - Creates two WoT instances connected by network.
  - Creates an identity on WoT #1 and has the IdentityInserter insert
    it into the local Freenet network.
  - Creates another identity on WoT #2 which adds the remote identity
    by its URI and sets a positive trust to it.
  - Waits until the remote identity is successfully fetched and imported
    by the IdentityFetcher and validates its attributes are equal to the
    original.

  This increases WoT's overall test coverage by lines from 47% to 49%,
  and branch coverage from 40% to 42%.
  This was measured by the Cobertura support which was introduced by the
  previous release and can be used by:
    ant -Dtest.coverage=true && firefox test-coverage/html/index.html

- 0006951: [Code quality] Unit tests: Networked tests for captcha
           upload/download/solving (xor)

  Another networked test was introduced which tests a full cycle of
  identity introduction among two WoT instances in a local test network
  of 10 Freenet nodes:
  - an identity is created at the "server" WoT instance and it uploads
    a captcha.
  - another identity is created at the "client" WoT instance to trust
    the server identity and download its captcha.
  - once the captcha is downloaded at the client it is solved and the
    solution is uploaded to the test network.
  - the test then waits for the server to discover the captcha solution
    and checkes whether it results in a trust value to the client
    identity.
  - the test further waits for whether the client identity is actually
    downloaded as a result of the trust value.
  - once the client identity is downloaded at the server it is compared
    with the instance of it at the client using Identity.equals() to
    have a bonus check for whether all its data is transported correctly
    across the network.

  The test prints the time each of the important steps take to execute,
  and also the total round-trip time for introduction - which is 3
  minutes now thanks to the bugs caught by the test - it was up to 1.7 h
  before.

  This increases WoT's overall test coverage by lines from 49% to 52%,
  and branch coverage from 42% to 44%.

- 0006895: [Code quality] Unit tests: (Almost) Full coverage for class
           Score (xor)

  This release delivers a rewrite of the test for class Score, which is
  one of the core storage classes of WoT's data model.
  It is a simple class but used very much so decent tests are still a
  good idea.
  It has got 94% line coverage and 89 % branch coverage.
  Previously line coverage of this was 75%, branch coverage 58%.
  The new test is 1190 lines long itself, the old one was merely 138.
  So while the old test did have a high coverage level, it probably
  didn't check most of the behavior of the stuff it happened to cause
  to execute - remember: coverage percentages only say what is executed,
  not whether it is actually tested.
  When designing the new test I tried to test every aspect of the code
  no matter how unlikely to fail it seems.
  This gives us good insurance against future bogus modifications, which
  could for example happen when we migrate from db4o to a different
  database.

  The few percents which are missing towards 100% are due to not testing
  deprecated code; and due to the fact that the Ant builder of WoT does
  not support Mockito yet - without it we cannot cause the internal
  failures required to cover the remaining branches.
  A bug has been filed to address this in the future:
  https://bugs.freenetproject.org/view.php?id=6915

  As a result of reviewing and testing almost every aspect of class
  Score, various non-critical bugs in Score and other core classes were
  detected and fixed:
  - Minor performance improvement: Remove useless synchronization of all
    the getters / setters at Score and Trust
  - Make IdentityID / TrustID / ScoreID detect too short IDs
  - Remove incompliant hashCode() there
  - Unify toString() of core classe to get coherent logging
  - Fix creation date of Score not always being strictly equal to date
    of modification after creation
  - Provide replacement for deprecated function at Score
  - Score.setCapacity(): Check whether capacity is legal
  - Score.getDateOfCreation(): Remove duplicate function
  - Score.clone(): Fix to copy mVersionID
  - Score.startupDatabaseIntegrityTest(): Check mCapacity and mVersionID
  - Main class WebOfTrust: Document what capacities are, provide array
    with all valid ones
  - DateUtil: New class to provide waitUntilCurrentTimeUTCIsAfter(),
    useful for unit tests
  - AbstractJUnit4BaseTest: Migrate more functions from the JUnit 3
    predecessor of this class

  Irrelevant but interesting random statistics: The tested class Score
  itself is 540 lines of code. Comparing that to the 1190 lines of
  test code for it shows that the metric for how long full unit tests
  are typically may be "twice as much as the tested code itself."

- [Code quality] Unit tests: Add scripts to benchmark the tests, speed
                 three up (xor)

  The following scripts were added to the tools/ directory:
  - benchmark-unit-tests: to benchmark all unit tests locally when
    compiling.
  - benchmark-unit-tests-from-travis: to process a log file from
    Travis CI to produce the same output as the above local benchmark
    script.

  They produce sorted output like this:
    1.234 sec package.ClassName1.testFunction1()
    1.235 sec package.ClassName2.testFunction2()

  Actual results (FIXME: Update once this build is finished):
    https://gist.github.com/xor-freenet/28925cee6e44ad899060f91659250cd2

  Additionally, in order to be able to tweak a single test after using
  the above scripts to determine slow tests, the script
  "benchmark-unit-test" was added. It allows running a single test for
  an arbitrary amount of iterations and computes the average execution
  time from those.

  I will use this to speed up the tests.
  First improvements are done already:
  - for testMaximalOwnIdentityXMLSize(), it used to take 186 seconds on
    my machine, now takes 9.
  - for the networked tests which were added by this release, they were
    improved right away to take up to 14 minutes less of time to
    execute. E.g. IdentityFetcherTest now takes less than 2 minutes to
    run under optimal conditions.

- 0006967: [Code quality] Unit tests: Introduce finite memory limit of
           512 MB (xor)

  Previously there was no memory limit for the unit tests at all, they
  could consume as much memory as they pleased / as the default Java
  memory limit of the current machine allowed them to.

  The 512 MB memory limit was determined by running ~ 10 iterations of
  the tests with 4GB, 512 MB, 384 MB and 256 MB.

  The runtime average wasn't significantly different for any of those
  so there is no excessive garbage collection happening and 512 MB
  should be  enough for now and leave some leeway for new tests.

  This is also intended as a service to people who use Freenet on a
  Raspberry Pi - being able to build WoT there is a first step towards
  ensuring it works with the hardware constraints of the Pi.
  Along with the decrease of memory / CPU usage because of the
  IdentityFetcher-rewrite of this release WoT may nowadays actually just
  work fine on a Pi. Feedback is welcome :)

  FYI you can use e.g. jVisualVM to watch the memory usage and GC
  activity of Freenet.

- 0006891: [Code quality] Make code for downloading identities modular
           to allow alternate implementations (xor)

  With the implementation of issue 0003816 (Redesign the IdentityFetcher
  to get rid of the network wide O(n²) fetch count), the goal was not
  only to replace the old IdentityFetcher with a new implementation, but
  also to keep the old codebase working so it can be used as something
  to test the new codebase against.

  Therefore an interface "IdentityDownloader" was extracted
  from IdentityFetcher; and a class "IdentityDownloaderController" was
  introduced which can run one or multiple different implementations of
  IdentityDownloader.
  This can be the old IdentityFetcher, the current new implementation,
  or possible future alternate ones.

  So if you want to provide another implementation with possible
  improvements over the heuristics of the one this release ships, go
  ahead, it should be easy :)

- 0006751: [Code quality] Provide a Gradle build script once fred does
           (xor)

  The most notable benefit is that the Gradle script executes unit tests
  in parallel on all available CPU cores to greatly reduce their
  runtime.
  To reap immediate benefit of this, Travis CI has been changed to use
  Gradle instead of Ant.
  That may speed up the builds by up to 50% as Travis provides 2 CPU
  cores.
  It will ensure builds exceed the 50 minute timeout less frequently
  - if at all anymore.

  The new Gradle script has been based on fred's Gradle script as of
  fred build 1481.
  It has been trimmed from fred's 271 lines to 100 lines. This makes it
  easy to understand and may allow it to serve as a template for other
  Freenet plugins.

  To ensure the script guarantees identical results as compared to the
  original Ant build script, two further scripts were added:
  - tools/compare-gradle-jars-with-ant-jars
      Builds the WoT main and test JARs with both Ant and Gradle, unzips
      them, and checks if the containing files match.
  - tools/compare-gradle-tests-with-ant-tests
      Checks if Ant and Gradle run the same set of unit tests.

  These scripts have been executed once on Travis CI and they were
  successful against all supported Java versions (see below).

  The Ant build script has *not* been removed as it has more features
  (most notably test coverage analysis).
  I will continue maintaining both scripts until the Gradle one has the
  same capabilities, and possibly beyond to provide developers with
  freedom of choice.
  Also having two different implementations of the same thing available
  *and* tools to compare their results is a very sophisticated test,
  which is a benefit of its own.

- [Code quality] Travis CI: Test against most recent Java versions (xor)

  The cloud service now runs the unit tests periodically against:
  - oraclejdk9
  - oraclejdk8
  - openjdk10 (new)
  - openjdk9 (new)
  - openjdk8
  - openjdk7

  This is the maximal set of Java versions which are both supported by
  Freenet and Travis CI as of 2018-10-31.
  Notably the new Java 11 is not tested yet due to Freenet's Gradle not
  working on it.

- [Code quality] Travis CI: Speed up build time from 1 hour to
                 20 minutes (xor)

  Since build0020, the Travis CI build script has been uploading the
  compiled WoT JAR directly to Freenet (as a CHK) from Travis CI.
  The upload would start at the end of the build, and then take up to
  half an hour, in addition to the time it took to run the build.

  This has been improved by starting the Freenet node *before* the build
  already.
  As the build takes 10 minutes (was much more before the previous
  optimization of using Gradle), the node has that time to establish
  connectivity to the network before the upload is started at the end
  of the build.
  This greatly reduces the time of the upload because a well-connected
  node will upload much more quickly I suppose.
  A full "build, test and upload" cycle can now sometimes happen in as
  little as ~ 20 minutes.

  An important benefit of this is that builds should reach the 50 minute
  time limit of Travis CI much less frequently now, if at all anymore.

  Further, while previously the upload would happen on all Java versions
  which Travis CI compiles for, currently 6 different ones, the upload
  now only happens on the minimal Java version as required by Freenet
  (currently Java 7).
  This:
  - ensures the resulting JAR will work on all Java versions
  - cuts down our usage of Travis' free execution time
  - further speeds up the time until a full build completes because
    Travis only offers 5 parallel build jobs, but we compile for 6 Java
    versions.
    So previously the last job would have had to wait a long time for
    one of the first ones to finish.

  It has also been ensured that the Java 7 job, which takes the longest
  due to the upload to Freenet, now is the first job which is started
  in a build instead of the last one as it was previously.

  Overall, including the previously shipped optimization of using Gradle
  on Travis CI for parallel unit test execution, this yields the
  following improvements (rough estimates) to the Travis build speed:
  - Where compiling, testing and uploading a single WoT build, for all
    Java versions, on Travis would previously finish after ~1 hour, it
    now finishes in 20 min.
    This means when a developer uploads new code to see if the tests
    succeed they now only have to wait for 20 minutes for full
    confirmation.
  - Where the sum of Travis execution time for a single build, i.e.
    sum of the time slots for the build jobs of all Java versions on
    Travis, would previously be ~3 hours, it is now ~1 hour.
    This isn't a direct benefit to Freenet developers, but a matter of
    politeness towards Travis: They provide us with free computing
    power, so we should try to not waste it.

- 0006934: [Code quality] Replace "WithoutCommit" function name suffixes
           with "@NeedsTransaction" annotation (xor)

  The annotation was added to class Persistent.
  Newly written functions will use that annotation from now on.
  As the performance work is currently more important I will refrain
  from renaming all preexisting functions for a while.

- [Code quality] Disable very slow assert()s by default (xor)

  They had been added to test incremental Score computation:
  After each trust list import they would do a full Score recomputation
  to see if the incremental one was correct.
  This slowed down debugging sessions a lot so it is disabled by default
  now as incremental computation seems to be bugfree.
  (Non-debug sessions were not affected by this, assertions need to be
  enabled by hand.)

  Class DebugConfiguration has been added to contain the setting for
  this and possibly further similar settings to be added in the future.

- 0007033: [Code quality] Speed up Travis CI builds: Don't recompile
           fred if "git pull" changed nothing (xor)

  The Travis CI build script of WoT usually obtains the most recent
  development version of the Freenet core from GitHub and compiles it
  before it compiles WoT itself against that.

  Compilation of Freenet will now be omitted if its code has not changed
  since the last build.
  The execution time of a Travis CI build is thereby reduced by ~1
  minute. That doesn't sound like much, but there is a time limit of
  50 minutes per Travis build, so it is valuable.

  What would be more beneficial is to obtain the Freenet JAR files from
  the Maven repository which Freenet's Travis CI publishes them to.
  I don't know whether publishing to Maven was implemented yet though,
  the HTML of mvn.freenetproject.org sounds like it wasn't
  - if it in fact was and someone knows how to use it please let me
  know.

- 0006972: [Code quality] Rewrite README.md file for developers (xor)

  The README in the Git repository was converted to GitHub markdown to
  display with proper formatting on GitHub.
  All information in it was reviewed and fixed to match how things work
  currently.

  The compilation, testing and debugging instructions have been amended
  to e.g. explain special features such as benchmark scripts, test
  scripts and test coverage analysis.
  A concise yet complete description of the purpose of WoT was added.

THANKS TO

  - ArneBab
